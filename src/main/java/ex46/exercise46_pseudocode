
package ex46;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class App
{
    public static ArrayList<listofwords> getWords(File file) throws FileNotFoundException
    {

    }
    //for looking word for word in input.
        ArrayList<listofwords> HOW_MANY_WORDS = new ArrayList<>();
        String This_is_the_word_name;
           int How_Many_Badgers_There_ARe = 0; int HOW_MANY_MUSHRMS_ARE_THERE = 0; int HOW_MANY_SNAKES_R_IN_THE_INPUT_FILE = 0;

        Scanner reader = new Scanner(file);

        while(reader.hasNext()) {
            This_is_the_word_name = reader.next();
            //this function lets you count each word that is similar.
               if(This_is_the_word_name.equals("badger"))
                ++How_Many_Badgers_There_ARe;
               if(This_is_the_word_name.equals("mushroom"))
                ++HOW_MANY_MUSHRMS_ARE_THERE ;
              if(This_is_the_word_name.equals("snake"))
                ++HOW_MANY_SNAKES_R_IN_THE_INPUT_FILE;
        }
        listofwords for_the_bager = new listofwords(How_Many_Badgers_There_ARe, "badger");
        HOW_MANY_WORDS.add(for_the_bager ); //add words to list
        listofwords for_the_mshrm= new listofwords(HOW_MANY_MUSHRMS_ARE_THERE , "mushroom");
        HOW_MANY_WORDS.add(for_the_mshrm);
        listofwords FOR_THE_SNAKEE = new listofwords(HOW_MANY_SNAKES_R_IN_THE_INPUT_FILE, "snake");
        HOW_MANY_WORDS.add(FOR_THE_SNAKEE);
        return HOW_MANY_WORDS;
    }
//this function prints out the output and includes the line spacing, etc needed.
    public static void main( String[] args ) throws IOException {
            File the_file = new File("C:\\Users\\choda\\IdeaProjects\\example1\\src\\main\\java\\ex46\\exercise46_input.txt");
          ArrayList<listofwords> THESE_R_THE_WORDS = getWords(the_file);
         // This sorts the words for the output.
         //This is a forloop that's for how many words there are.
        for(listofwords lk_at_wrd: THESE_R_THE_WORDS ) {
            System.out.print(lk_at_wrd.Grabbing_the_name_now() + ": ");
            //this forloop is used so that you are getting the correct number of stars for the output.
            int VC;
                   for( VC = 0; VC < lk_at_wrd.Lets_count_right_now(); ++VC)
                System.out.print("*");
                 System.out.print("\n");
        }

       //this is the comparator class.

package ex46;


import java.util.Comparator;

//This comparator class is used to compare the list of words that you provided.
public  class letscomparenow implements Comparator<listofwords>


{
    public int compare(listofwords This_is_for_the_fst_word, listofwords itsforsndword)
    {


        return itsforsndword.Lets_count_right_now() - This_is_for_the_fst_word.Lets_count_right_now();

    }




}




    }
}

//This is the letscompare now class.
package ex46;


import java.util.Comparator;
//this is used to order the objects of a user-defined class in the program.

public  class letscomparenow implements Comparator<listofwords>

//used to produce output orderly because we are using comparator.
{
    public int compare(listofwords This_is_for_the_fst_word, listofwords itsforsndword)
    {


        return itsforsndword.Lets_count_right_now() - This_is_for_the_fst_word.Lets_count_right_now();

    }




}
This is the code in the class AppTest


          import static org.junit.Assert.assertTrue;
          //This is a very useful method that determines if the test case status will pass or end up failing.
          import org.junit.Assert;

          import org.junit.Test;

          public class AppTest {

              @Test
              public void shouldAnswerWithTrue()
             // "shouldAnswerWithTrue" This invokes the method assertTrue
              {
                  assertTrue(true);
                  //This means that you will assert that your expression in correct.
              }